							JavaScript Interview Q&A
1. What is JavaScript?

   JavaScript is the Programming Language for the Web.
   JavaScript can update and change both HTML and CSS.
   JavaScript can calculate, manipulate and validate data.

2. What are JavaScript Data Types? 
   There are three major Data types in JavaScript.

   Primitive:
	Numbers
	Strings
	Boolean
	Symbol

    Trivial:
	Undefined
	Null

    Composite:
	Objects
	Functions
	Arrays

3. What are all the looping structures in JavaScript ?
   while loop: A while loop is a control flow statement that allows code to be executed repeatedly based on a given Boolean condition. The while loop can be thought of as a repeating if statement.

   for loop: A for loop provides a concise way of writing the loop structure. Unlike a while loop, for statement consumes the initialization, condition and increment/decrement in one line thereby providing a shorter, easy to debug structure of looping.

   do while: A do-while loop is similar to while loop with the only difference that it checks the condition after executing the statements, and therefore is an example of Exit Control Loop.

4. What would be the result of 3+2+”7″?
   Here, 3 and 2 behave like an integer, and “7” behaves like a string. So 3 plus 2 will be 5. Then the output will be 5+”7″ = 57.

5. What is the use of the isNaN function?
   The number isNan function determines whether the passed value is NaN (Not a number) and is of the type “Number”. In JavaScript, the value NaN is considered a type of number. It returns true if the argument is not a number, else it returns false.

6. Which is faster in JavaScript and ASP script?
   JavaScript is faster compared to ASP Script. JavaScript is a client-side scripting language and does not depend on the server to execute. The ASP script is a server-side scripting language always dependable on the server.

7. What is negative infinity?
   The negative infinity is a constant value represents the lowest available value. It means that no other number is lesser than this value. It can be generate using a self-made function or by an arithmetic operation. JavaScript shows the NEGATIVE_INFINITY value as -Infinity.

8. Is it possible to break JavaScript Code into several lines?
   Yes, it is possible to break the JavaScript code into several lines in a string statement. It can be broken by using the backslash ‘\’. 
For example:

	document.write("A Online Computer Science Portal\ for Geeks")
	The code-breaking line is avoid by JavaScript which is not preferable.

	let gfg= 10, GFG = 5,
	Geeks =
	gfg + GFG;

9. Which company developed JavaScript?
   Netscape developed JavaScript and was created by Brenden Eich in the year of 1995.

10. What are undeclared and undefined variables?
    Undefined: It occurs when a variable is declare not not assign any value. Undefined is not a keyword.
Undeclared: It occurs when we try to access any variable which is not initialize or declare earlier using the var or const keyword. If we use ‘typeof’ operator to get the value of an undeclare variable, we will face the runtime error with the return value as “undefined”. The scope of the undeclare variables is always global.

11. What are global variables? How are these variables declared, and what are the problems associated with them?
    In contrast, global variables are the variables that define outside of functions. These variables have a global scope, so they can be used by any function without passing them to the function as parameters. 

12. What do you mean by NULL in JavaScript?
    The NULL value represents that no value or no object. It is known as empty value/object.

13. How to delete property-specific values?
    The delete keyword deletes the whole property and all the values at once like

	let gfg={Course: "DSA", Duration:30};
	delete gfg.Course;
14. What is a prompt box?
    The prompt box is a dialog box with an optional message prompting the user to input some text. It is often used if the user wants to input a value before entering a page. It returns a string containing the text entered by the user, or null.

15. What is the ‘this’ keyword in JavaScript?
    Functions in JavaScript are essential objects. Like objects, it can be assign to variables, pass to other functions, and return from functions. And much like objects, they have their own properties. ‘this’ stores the current execution context of the JavaScript program. Thus, when it use inside a function, the value of ‘this’ will change depending on how the function is defined, how it is invoked, and the default execution context.

16. Explain the working of timers in JavaScript. Also elucidate the drawbacks of using the timer, if any.
    The timer executes some specific code at a specific time or any small amount of code in repetition to do that you need to use the functions setTimout, setInterval, and clearInterval. If the JavaScript code sets the timer to 2 minutes and when the times are up then the page displays an alert message “times up”. The setTimeout() method calls a function or evaluates an expression after a specified number of milliseconds.

17. What is the difference between ViewState and SessionState?
	ViewState: It is specific to a single page in a session.
	SessionState: It is user specific that can access all the data on the web pages.

18. How to submit a form using JavaScript?
    You can use document.form[0].submit() method to submit the form in JavaScript.

19. Does JavaScript support automatic type conversion? 
    Yes, JavaScript supports automatic type conversion.

20. How can the style/class of an element be changed?
    To change the style/class of an element there are two possible ways. We use document.getElementByID method

	document.getElementById("myText").style.fontSize = "16px;
	document.getElementById("myText").className = "class";

21. Explain how to read and write a file using JavaScript?
    The readFile() functions is used for reading operation.
	readFile( Path, Options, Callback)
    The writeFile() functions is used for writing operation.
	writeFile( Path, Data, Callback)

22. What is called Variable typing in JavaScript ?
    The variable typing is the type of variable used to store a number and using that same variable to assign a “string”.

	Geeks = 42;
	Geeks = "GeeksforGeeks";

23. How to convert the string of any base to integer in JavaScript?
    In JavaScript, parseInt() function is used to convert the string to an integer. This function returns an integer of base which is specified in second argument of parseInt() function. The parseInt() function returns Nan (not a number) when the string doesn’t contain number.

24. Explain how to detect the operating system on the client machine?
    To detect the operating system on the client machine, one can simply use navigator.appVersion or navigator.userAgent property. The Navigator appVersion property is a read-only property and it returns the string that represents the version information of the browser.

25. What are the types of Pop up boxes available in JavaScript?
    There are three types of pop boxes available in JavaScript.

	Alert
	Confirm
	Prompt

26. What is the difference between an alert box and a confirmation box?
    An alert box will display only one button which is the OK button. It is used to inform the user about the agreement has to agree. But a Confirmation box displays two buttons OK and cancel, where the user can decide to agree or not.

27. What is the disadvantage of using innerHTML in JavaScript?
    There are lots of disadvantages of using the innerHTML in JavaScript as the content will replace everywhere. If you use += like “innerHTML = innerHTML + ‘html’” still the old content is replaced by HTML. It preserves event handlers attached to any DOM elements.

28. What is the use of void(0) ?
    The void(0) is used to call another method without refreshing the page during the calling time parameter “zero” will be passed.

29. What is the ‘Strict’ mode in JavaScript and how can it be enabled?
    Strict Mode is a new feature in ECMAScript 5 that allows you to place a program or a function in a “strict” operating context. This strict context prevents certain actions from being taken and throws more exceptions. The statement “use strict” instructs the browser to use the Strict mode, which is a reduced and safer feature set of JavaScript.

30. How to get the status of a CheckBox?
    The DOM Input Checkbox Property is used to set or return the checked status of a checkbox field. This property is used to reflect the HTML Checked attribute.

	document.getElementById("GFG").checked;
	If the CheckBox is checked then it returns True.

31. How to explain closures in JavaScript and when to use it?
    The closure is created when a child functions to keep the environment of the parent’s scope even after the parent’s function has already executed. The Closure is a locally declared variable related to a function. The closure will provide better control over the code when using them.


	// Explanation of closure 
	function foo() { 
	    let b = 1; 
	    function inner() { 
	        return b; 
	    } 
	    return inner; 
	} 
	let get_func_inner = foo(); 

	console.log(get_func_inner()); 
	console.log(get_func_inner()); 
	console.log(get_func_inner());

32. What is the difference between call() and apply() methods ?
    Both methods are used in a different situation

    call() Method: It calls the method, taking the owner object as argument. The keyword this refers to the ‘owner’ of the function or the object it belongs to. We can call a method that can be used on different objects.
    apply() Method: The apply() method is used to write methods, which can be used on different objects. It is different from the function call() because it takes arguments as an array.

33. How to target a particular frame from a hyperlink in JavaScript ?
    This can be done by using the target attribute in the hyperlink. Like

	<a href="/geeksforgeeks.htm" target="newframe">New Page</a>

34. Write the errors shown in JavaScript?
    There are three different types of errors in JavaScript.

    Syntax error: A syntax error is an error in the syntax of a sequence of characters or tokens that are intended to be written in a particular programming language.
    Logical error: It is the most difficult error to be traced as it is the error on the logical part of the coding or logical error is a bug in a program that causes to operate incorrectly and terminate abnormally.
    Runtime Error: A runtime error is an error that occurs during the running of the program, also known as an exception.


1. What is typeof operator?

JavaScript provides a typeof operator that can examine a value and tell you what type it is:

var a;
typeof a;				// "undefined"

a = "hello world";
typeof a;				// "string"

a = 42;
typeof a;				// "number"

a = true;
typeof a;				// "boolean"

a = null;
typeof a;				// "object" -- weird, bug

a = undefined;
typeof a;				// "undefined"

a = { b: "c" };
typeof a;				// "object"
 

2. What is equality in JavaScript ?

JavaScript has both strict and type–converting comparisons:

Strict comparison (e.g., ===) checks for value equality without allowing coercion

Abstract comparison (e.g. ==) checks for value equality with coercion allowed

var a = "42";
var b = 42;

a == b;			// true
a === b;		// false
Some simple equality rules:

If either value (aka side) in comparison could be the true or false value, avoid == and use ===.

If either value in comparison could be of these specific values (0, "", or [] -- empty array), avoid == and use ===.

In all other cases, you're safe to use ==. Not only is it safe, but in many cases, it simplifies your code in a way that improves readability.

3. What is the object type?

The object type refers to a compound value where you can set properties (named locations) that each holds their own values of any type.

var obj = {
	a: "hello world", // property
	b: 42,
	c: true
};

obj.a;		// "hello world", accessed with doted notation
obj.b;		// 42
obj.c;		// true

obj["a"];	// "hello world", accessed with bracket notation
obj["b"];	// 42
obj["c"];	// true
Bracket notation is also useful if you want to access a property/key but the name is stored in another variable, such as:

var obj = {
	a: "hello world",
	b: 42
};

var b = "a";

obj[b];			// "hello world"
obj["b"];		// 42

4. Explain is Scope in JavaScript?
Entry
In JavaScript, each function gets its own scope. The scope is basically a collection of variables as well as the rules for how those variables are accessed by name. Only code inside that function can access that function's scoped variables.

A variable name has to be unique within the same scope. A scope can be nested inside another scope. If one scope is nested inside another, code inside the innermost scope can access variables from either scope.

5. Explain arrays in JavaScript?

An array is an object that holds values (of any type) not particularly in named properties/keys, but rather in numerically indexed positions:

var arr = [
	"hello world",
	42,
	true
];

arr[0];			// "hello world"
arr[1];			// 42
arr[2];			// true
arr.length;		// 3

typeof arr;		// "object"

6. Explain what a callback function is and provide a simple example?

A callback the function is a function that is passed to another function as an argument and is executed after some operation has been completed. Below is an example of a simple callback function that logs to the console after some operations have been completed.

function modifyArray(arr, callback) {
  // do something to arr here
  arr.push(100);
  // then execute the callback function that was passed
  callback();
}

var arr = [1, 2, 3, 4, 5];

modifyArray(arr, function() {
  console.log("array has been modified", arr);
});

7. Given a string, reverse each word in the sentence?

var string = "Welcome to this Javascript Guide!";

// Output becomes !ediuG tpircsavaJ siht ot emocleW
var reverseEntireSentence = reverseBySeparator(string, "");

// Output becomes emocleW ot siht tpircsavaJ !ediuG
var reverseEachWord = reverseBySeparator(reverseEntireSentence, " ");

function reverseBySeparator(string, separator) {
  return string.split(separator).reverse().join(separator);
}



@@@@@@@@@@@@

############

1. What is AJAX?
	
AJAX is a developer's dream, because you can:

	Read data from a web server - after a web page has loaded
	Update a web page without reloading the page
	Send data to a web server - in the background

2. js asynchronous or synchronous?

   JavaScript is an asynchronous and concurrent programming language that offers a lot of flexibility. It's single-threaded like synchronous but also non-blocking like asynchronous. Although it's synchronous by nature, JavaScript benefits from an asynchronous process.

3. what is object in js?

   An object is a collection of properties, and a property is an association between a name (or key) and a value. A property's value can be a function, in which case the property is known as a method. Objects in JavaScript, just as in many other programming languages, can be compared to objects in real life.

	// JavaScript code demonstrating a simple object
	let school = {
	    name: 'Vivekananda School',
	    location: 'Delhi',
	    established: '1971',
	    displayInfo: function () {
	        console.log(`${school.name} was established 
	              in ${school.established} at ${school.location}`);
	    }
	}
	school.displayInfo();   

	Output
	Vivekananda School was established 
	              in 1971 at Delhi

4. what is JSON?

   JavaScript Object Notation (JSON) is a standard text-based format for representing structured data based on JavaScript object syntax. It is commonly used for transmitting data in web applications (e.g., sending some data from the server to the client, so it can be displayed on a web page, or vice versa).

5. What is the DOM?
   The DOM is a W3C (World Wide Web Consortium) standard.

   The DOM defines a standard for accessing documents:
	"The W3C Document Object Model (DOM) is a platform and language-neutral interface that allows programs and scripts to dynamically access and update the content, structure, and style of a document."

   The W3C DOM standard is separated into 3 different parts:
	Core DOM - standard model for all document types
	XML DOM - standard model for XML documents
	HTML DOM - standard model for HTML documents

6. What is the HTML DOM?
   The HTML DOM is a standard object model and programming interface for HTML. It defines:

	The HTML elements as objects
	The properties of all HTML elements
	The methods to access all HTML elements
	The events for all HTML elements
	In other words: The HTML DOM is a standard for how to get, change, add, or delete HTML elements.


5. what OOPs?

   OOPs Concept in JavaScript
     Object
     Classes
     Encapsulation
     Abstraction	
     Inheritance
     Polymorphism

   Let’s dive into the details of each one of them and see how they are implemented in JavaScript.

     Object: An Object is a unique entity that contains properties and methods. For example “a car” is a real-life Object, which has some characteristics like color, type, model, and horsepower and performs certain actions like driving. The characteristics of an Object are called Properties in Object-Oriented Programming and the actions are called methods. An Object is an instance of a class. Objects are everywhere in JavaScript, almost every element is an Object whether it is a function, array, or string. 

    Note: A Method in javascript is a property of an object whose value is a function. 

    The object can be created in two ways in JavaScript:
	Object Literal
	Object Constructor

Example: Using an Object Literal.

// Defining object
let person = {
    first_name: 'Mukul',
    last_name: 'Latiyan',
 
    //method
    getFunction: function () {
        return (`The name of the person is 
          ${person.first_name} ${person.last_name}`)
    },
    //object within object
    phone_number: {
        mobile: '12345',
        landline: '6789'
    }
}
console.log(person.getFunction());
console.log(person.phone_number.landline);
Output: 

Example: Using an Object Constructor.


// Using a constructor
function person(first_name, last_name) {
    this.first_name = first_name;
    this.last_name = last_name;
}
// Creating new instances of person object
let person1 = new person('Mukul', 'Latiyan');
let person2 = new person('Rahul', 'Avasthi');
 
console.log(person1.first_name);
console.log(`${person2.first_name} ${person2.last_name}`);
Output: 

Note: The JavaScript Object.create() Method creates a new object, using an existing object as the prototype of the newly created object.

Example:


// Object.create() example a
// simple object with some properties
const coder = {
    isStudying: false,
    printIntroduction: function () {
        console.log(`My name is ${this.name}. Am I 
              studying?: ${this.isStudying}.`)
    }
}
// Object.create() method
const me = Object.create(coder);
 
// "name" is a property set on "me", but not on "coder"
me.name = 'Mukul';
 
// Inherited properties can be overwritten
me.isStudying = true;
 
me.printIntroduction();
Output: 



Classes: Classes are blueprints of an Object. A class can have many Objects because the class is a template while Objects are instances of the class or the concrete implementation. 
Before we move further into implementation, we should know unlike other Object Oriented languages there are no classes in JavaScript we have only Object. To be more precise, JavaScript is a prototype-based Object Oriented Language, which means it doesn’t have classes, rather it defines behaviors using a constructor function and then reuses it using the prototype. 

Note: Even the classes provided by ECMA2015 are objects.

JavaScript classes, introduced in ECMAScript 2015, are primarily syntactical sugar over JavaScript’s existing prototype-based inheritance. The class syntax is not introducing a new object-oriented inheritance model to JavaScript. JavaScript classes provide a much simpler and clearer syntax to create objects and deal with inheritance. 

-Mozilla Developer Network

Example: Let’s use ES6 classes then we will look at the traditional way of defining an Object and simulate them as classes.


// Defining class using es6
class Vehicle {
    constructor(name, maker, engine) {
        this.name = name;
        this.maker = maker;
        this.engine = engine;
    }
    getDetails() {
        return (`The name of the bike is ${this.name}.`)
    }
}
// Making object with the help of the constructor
let bike1 = new Vehicle('Hayabusa', 'Suzuki', '1340cc');
let bike2 = new Vehicle('Ninja', 'Kawasaki', '998cc');
 
console.log(bike1.name);    // Hayabusa
console.log(bike2.maker);   // Kawasaki
console.log(bike1.getDetails());
Output:



Example: Traditional Way of defining an Object and simulating them as classes.


// Defining class in a Traditional Way.
function Vehicle(name, maker, engine) {
    this.name = name,
        this.maker = maker,
        this.engine = engine
};
 
Vehicle.prototype.getDetails = function () {
    console.log('The name of the bike is ' + this.name);
}
 
let bike1 = new Vehicle('Hayabusa', 'Suzuki', '1340cc');
let bike2 = new Vehicle('Ninja', 'Kawasaki', '998cc');
 
console.log(bike1.name);
console.log(bike2.maker);
console.log(bike1.getDetails());
Output: 



As seen in the above example it is much simpler to define and reuse objects in ES6. Hence, we would be using ES6 in all of our examples.

Abstraction: Abstraction means displaying only essential information and hiding the details. Data abstraction refers to providing only essential information about the data to the outside world, hiding the background details or implementation. 

Encapsulation: The process of wrapping properties and functions within a single unit is known as encapsulation. 

Example: Let’s understand encapsulation with an example.


// Encapsulation example
class person {
    constructor(name, id) {
        this.name = name;
        this.id = id;
    }
    add_Address(add) {
        this.add = add;
    }
    getDetails() {
        console.log(`Name is ${this.name},
        Address is: ${this.add}`);
    }
}
 
let person1 = new person('Mukul', 21);
person1.add_Address('Delhi');
person1.getDetails();
Output: In this example, we simply create a person Object using the constructor, Initialize its properties and use its functions. We are not bothered by the implementation details. We are working with an Object’s interface without considering the implementation details. 

Sometimes encapsulation refers to the hiding of data or data Abstraction which means representing essential features hiding the background detail. Most of the OOP languages provide access modifiers to restrict the scope of a variable, but there are no such access modifiers in JavaScript, there are certain ways by which we can restrict the scope of variables within the Class/Object. 

Example:


// Abstraction example
function person(fname, lname) {
    let firstname = fname;
    let lastname = lname;
 
    let getDetails_noaccess = function () {
        return (`First name is: ${firstname} Last 
            name is: ${lastname}`);
    }
 
    this.getDetails_access = function () {
        return (`First name is: ${firstname}, Last 
            name is: ${lastname}`);
    }
}
let person1 = new person('Mukul', 'Latiyan');
console.log(person1.firstname);
console.log(person1.getDetails_noaccess);
console.log(person1.getDetails_access());
Output: In this example, we try to access some property(person1.firstname) and functions(person1.getDetails_noaccess) but it returns undefined while there is a method that we can access from the person object(person1.getDetails_access()). By changing the way we define a function we can restrict its scope.



Inheritance: It is a concept in which some properties and methods of an Object are being used by another Object. Unlike most of the OOP languages where classes inherit classes, JavaScript Objects inherit Objects i.e. certain features (property and methods) of one object can be reused by other Objects. 

Example: Let’s understand inheritance and polymorphism with an example.


// Inheritance example
class person {
    constructor(name) {
        this.name = name;
    }
    // method to return the string
    toString() {
        return (`Name of person: ${this.name}`);
    }
}
class student extends person {
    constructor(name, id) {
        // super keyword for calling the above 
        // class constructor
        super(name);
        this.id = id;
    }
    toString() {
        return (`${super.toString()},
        Student ID: ${this.id}`);
    }
}
let student1 = new student('Mukul', 22);
console.log(student1.toString());
Output: In this example, we define a Person Object with certain properties and methods and then we inherit the Person Object in the Student Object and use all the properties and methods of the person Object as well as define certain properties and methods for the Student Object.

Note: The Person and Student objects both have the same method (i.e toString()), this is called Method Overriding. Method Overriding allows a method in a child class to have the same name(polymorphism) and method signature as that of a parent class. 

In the above code, the super keyword is used to refer to the immediate parent class’s instance variable. 

Polymorphism: Polymorphism is one of the core concepts of object-oriented programming languages. Polymorphism means the same function with different signatures is called many times. In real life, for example, a boy at the same time may be a student, a class monitor, etc. So a boy can perform different operations at the same time. Polymorphism can be achieved by method overriding and method overloading


